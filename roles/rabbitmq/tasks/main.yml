---
# ============================================================================
# RabbitMQ Installation - Per-Host Confirmation Control
# ============================================================================

# OS and Version Compatibility Matrix (GCP-focused)
- name: Set compatible RabbitMQ versions based on OS and architecture
  set_fact:
    compatible_versions: >-
      {% if (ansible_distribution == 'Ubuntu' and ansible_distribution_release in ['focal', 'jammy', 'noble', 'oracular']) or
            (ansible_distribution == 'Debian' and ansible_distribution_release in ['bullseye', 'bookworm']) %}
        {% if ansible_architecture == 'x86_64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% elif ansible_architecture == 'aarch64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% else %}
          []
        {% endif %}
      {% elif ansible_distribution in ['RedHat', 'CentOS', 'Rocky', 'OracleLinux', 'AlmaLinux'] and ansible_distribution_major_version in ['8', '9'] %}
        {% if ansible_architecture == 'x86_64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% elif ansible_architecture == 'aarch64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% else %}
          []
        {% endif %}
      {% elif ansible_distribution == 'Fedora' and ansible_distribution_major_version | int >= 39 %}
        ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
      {% else %}
        []
      {% endif %}

- name: Display detected system information
  debug:
    msg: |
      Detected System Information:
        - OS: {{ ansible_distribution }} {{ ansible_distribution_release | default(ansible_distribution_major_version) }}
        - Architecture: {{ ansible_architecture }}
        - Host: {{ inventory_hostname }}
  tags: ['rabbitmq', 'info']

- name: Verify user-specified RabbitMQ version is compatible
  fail:
    msg: |
      ‚ùå INCOMPATIBLE RABBITMQ VERSION ‚ùå
      Requested Version: {{ rabbitmq_version }}
      Host: {{ inventory_hostname }}
      Compatible versions: {{ compatible_versions | join(', ') }}
  when: rabbitmq_version not in compatible_versions
  tags: ['rabbitmq', 'validation']

# # Check for existing RabbitMQ installation
# - name: Check if RabbitMQ is already installed
#   package_facts:
#     manager: auto
#   tags: ['rabbitmq', 'check']

# - name: Detect existing RabbitMQ installation
#   set_fact:
#     rabbitmq_already_installed: "{{ 'rabbitmq-server' in ansible_facts.packages }}"
#     existing_rabbitmq_version: "{{ ansible_facts.packages['rabbitmq-server'][0].version | default('unknown') if 'rabbitmq-server' in ansible_facts.packages else 'none' }}"
#     needs_upgrade: "{{ 'rabbitmq-server' in ansible_facts.packages and ansible_facts.packages['rabbitmq-server'][0].version != (rabbitmq_version + '-1') }}"
#   tags: ['rabbitmq', 'check']

# # Handle existing installation (only if confirmed)
# - name: Handle existing RabbitMQ installation
#   block:
#     - name: Stop existing RabbitMQ service for upgrade
#       systemd:
#         name: rabbitmq-server
#         state: stopped
#       when: rabbitmq_force_reinstall | default(false) or existing_rabbitmq_version != (rabbitmq_version + '-1')
      
#     - name: Backup existing RabbitMQ configuration
#       copy:
#         src: "{{ item.src }}"
#         dest: "{{ item.dest }}"
#         remote_src: yes
#         backup: yes
#       loop:
#         - { src: '/etc/rabbitmq/', dest: '/tmp/rabbitmq-config-backup-{{ ansible_date_time.epoch }}/' }
#         - { src: '/var/lib/rabbitmq/', dest: '/tmp/rabbitmq-data-backup-{{ ansible_date_time.epoch }}/' }
#       ignore_errors: yes
#       when: rabbitmq_backup_before_upgrade | default(true) and (rabbitmq_force_reinstall | default(false) or existing_rabbitmq_version != (rabbitmq_version + '-1'))
      
#   when: 
#     - rabbitmq_already_installed
#     - host_upgrade_confirmed | default(false)
#   tags: ['rabbitmq', 'backup']

# Set final installation facts
- name: Finalize RabbitMQ installation facts
  set_fact:
    selected_version: "{{ rabbitmq_version }}"
    installation_type: "{{ 'upgrade' if rabbitmq_already_installed else 'fresh' }}"
    package_manager: "{{ 'apt' if ansible_distribution in ['Ubuntu', 'Debian'] else 'yum' }}"
  when: host_upgrade_confirmed | default(false)
  tags: ['rabbitmq', 'facts']

- name: Display installation plan
  debug:
    msg: |
      üöÄ RabbitMQ Installation Plan for {{ inventory_hostname }}:
        - Target Version: {{ selected_version }}
        - Installation Type: {{ installation_type | title }}
        - Package Manager: {{ package_manager }}
        - Status: {{ 'PROCEEDING' if host_upgrade_confirmed | default(false) else 'SKIPPED' }}
  when: host_upgrade_confirmed | default(false)
  tags: ['rabbitmq', 'info']

# Include platform-specific installation tasks (only if confirmed)
- name: Include platform-specific installation tasks
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "unsupported_os.yml"
  when: host_upgrade_confirmed | default(false)
  tags: ['rabbitmq', 'install']

# Final status for processed hosts
- name: Display installation completion status
  debug:
    msg: |
      ‚úÖ RabbitMQ {{ selected_version }} Installation Complete on {{ inventory_hostname }}!
      
      üåê Access Information:
        - AMQP Port: {{ rabbitmq_tcp_port | default('5672') }}
        - Management UI: http://{{ ansible_default_ipv4.address }}:{{ rabbitmq_management_port | default('15672') }}
        - Admin User: {{ rabbitmq_admin_user }}
  when: host_upgrade_confirmed | default(false)
  tags: ['rabbitmq', 'summary']

# Final status for skipped hosts
- name: Display skip status for excluded hosts
  debug:
    msg: |
      ‚è≠Ô∏è  HOST SKIPPED: {{ inventory_hostname }}
      
      Reason: {{ skip_reason | default('Unknown') }}
      Current RabbitMQ Status: {{ 'Installed (' + existing_rabbitmq_version + ')' if rabbitmq_already_installed else 'Not Installed' }}
      
      This host was not modified and remains in its current state.
  when: not (host_upgrade_confirmed | default(false))
  tags: ['rabbitmq', 'summary']