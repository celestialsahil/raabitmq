---
# ============================================================================
# RabbitMQ Installation - Per-Host Confirmation Control
# ============================================================================

# OS and Version Compatibility Matrix (GCP-focused)
- name: Set compatible RabbitMQ versions based on OS and architecture
  set_fact:
    compatible_versions: >-
      {% if (ansible_distribution == 'Ubuntu' and ansible_distribution_release in ['focal', 'jammy', 'noble']) or
            (ansible_distribution == 'Debian' and ansible_distribution_release in ['bullseye', 'bookworm']) %}
        {% if ansible_architecture == 'x86_64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% elif ansible_architecture == 'aarch64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% else %}
          []
        {% endif %}
      {% elif ansible_distribution in ['RedHat', 'CentOS', 'Rocky', 'OracleLinux', 'AlmaLinux'] and ansible_distribution_major_version in ['8', '9'] %}
        {% if ansible_architecture == 'x86_64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% elif ansible_architecture == 'aarch64' %}
          ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
        {% else %}
          []
        {% endif %}
      {% elif ansible_distribution == 'Fedora' and ansible_distribution_major_version | int >= 39 %}
        ['4.1.3', '4.1.2', '4.1.1', '4.1.0']
      {% else %}
        []
      {% endif %}

- name: Display detected system information
  debug:
    msg: |
      Detected System Information:
        - OS: {{ ansible_distribution }} {{ ansible_distribution_release | default(ansible_distribution_major_version) }}
        - Architecture: {{ ansible_architecture }}
        - Host: {{ inventory_hostname }}
  tags: ['rabbitmq', 'info']

- name: Verify user-specified RabbitMQ version is compatible
  fail:
    msg: |
      ‚ùå INCOMPATIBLE RABBITMQ VERSION ‚ùå
      Requested Version: {{ rabbitmq_version }}
      Host: {{ inventory_hostname }}
      Compatible versions: {{ compatible_versions | join(', ') }}
  when: rabbitmq_version not in compatible_versions
  tags: ['rabbitmq', 'validation']

# Set final installation facts
- name: Finalize RabbitMQ installation facts
  set_fact:
    selected_version: "{{ rabbitmq_version }}"
    package_manager: "{{ 'apt' if ansible_distribution in ['Ubuntu', 'Debian'] else 'yum' }}"
  when: host_upgrade_confirmed | default(true)
  tags: ['rabbitmq', 'facts']

- name: Display installation plan
  debug:
    msg: |
      üöÄ RabbitMQ Installation Plan for {{ inventory_hostname }}:
        - Target Version: {{ selected_version }}
        - Package Manager: {{ package_manager }}
        - Status: {{ 'PROCEEDING' if host_upgrade_confirmed | default(false) else 'SKIPPED' }}
  when: host_upgrade_confirmed | default(true)
  tags: ['rabbitmq', 'info']

# Include platform-specific installation tasks (only if confirmed)
- name: Include platform-specific installation tasks
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"
    - "unsupported_os.yml"
  when: host_upgrade_confirmed | default(true)
  tags: ['rabbitmq', 'install']

- name: Enable RabbitMQ service is enabled and started on primary node
  systemd:
    name: rabbitmq-server
    state: started
    enabled: yes
  # when: inventory_hostname == (groups['rabbitmq'] | sort | first)

- name: Wait for RabbitMQ to be ready
  wait_for:
    port: 5672
    host: localhost
    timeout: 60
    delay: 5

- name: Enable RabbitMQ management plugin on primary node
  rabbitmq_plugin:
    names: rabbitmq_management
    state: enabled
  notify: restart rabbitmq
  when: inventory_hostname == (groups['rabbitmq'] | sort | first)

- name: Flush handlers to restart RabbitMQ with new config
  meta: flush_handlers

- name: Join the cluster on the secondary node
  block:
    # - name: Stop the RabbitMQ app before joining
    #   command: rabbitmqctl stop_app
    #   ignore_errors: yes

    - name: Join the primary node
      command: "rabbitmqctl join_cluster {{ 'rabbit@' + hostvars[groups['rabbitmq'] | sort | first].name }}"
      register: join_result
      changed_when: "'Clustering node' in join_result.stdout"

    - name: Start the RabbitMQ app after joining
      command: rabbitmqctl start_app
  when:
    - inventory_hostname != (groups['rabbitmq'] | sort | first)
    # - "'Clustering with' not in cluster_status_check.stdout"

- name: Finalize Cluster Configuration (runs on primary node)
  block:
    - name: Add RabbitMQ admin user with all permissions
      rabbitmq_user:
        user: "{{ rabbitmq_admin_user }}"
        password: "{{ rabbitmq_admin_password }}"
        vhost: /
        configure_priv: .*
        read_priv: .*
        write_priv: .*
        tags: administrator
        state: present
      register: admin_user_result
      until: admin_user_result is succeeded
      retries: 3
      delay: 5

    - name: Delete the default 'guest' user for security
      rabbitmq_user:
        user: guest
        state: absent

    - name: Set open file limit for RabbitMQ
      pam_limits:
        domain: "rabbitmq"
        limit_type: "-"
        limit_item: "nofile"
        value: "{{ rabbitmq_open_file_limit }}"
      when: rabbitmq_open_file_limit is defined

    - name: Check final cluster status
      command: rabbitmqctl cluster_status
      register: final_cluster_status
      changed_when: false

    - name: Display final cluster status
      debug:
        var: final_cluster_status.stdout_lines
  when: inventory_hostname == (groups['rabbitmq'] | sort | first)

# FIXED: Verify installation
- name: Wait for management interface to be ready
  uri:
    url: "http://localhost:15672/api/overview"
    method: GET
    user: "{{ rabbitmq_admin_user }}"
    password: "{{ rabbitmq_admin_password }}"
    force_basic_auth: yes
    status_code: 200
  register: management_check
  until: management_check.status == 200
  retries: 10
  delay: 10
  
- name: Display RabbitMQ installation status
  debug:
    msg: |
      RabbitMQ {{ rabbitmq_version }} installation completed successfully!
      Management interface: http://{{ ansible_default_ipv4.address }}:15672
      Admin user: {{ rabbitmq_admin_user }}

      Repositories configured:
      - Erlang: modern-erlang (EL{{ ansible_distribution_major_version }})
      - RabbitMQ: rabbitmq-el{{ ansible_distribution_major_version }}